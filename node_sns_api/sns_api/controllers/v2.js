/*
    <v1Í≥º Ï∞®Ïù¥Ï†ê>
    1. (routes) ÎØ∏Îì§Ïõ®Ïñ¥(apiLimiter) Ï∂îÍ∞Ä
    2. (controller) ÌÜ†ÌÅ∞ Ïú†Ìö®Í∏∞Í∞Ñ: 30Î∂Ñ
*/

const jwt = require('jsonwebtoken');
const { Domain, User, Post, Hashtag } = require('../models');

// üëá (JWT ÏÉùÏÑ±/Î∞úÍ∏â) POST /v2/token 
exports.createToken = async (req, res) => {
  const { clientSecret } = req.body;
  try {
    const domain = await Domain.findOne({
      where: { clientSecret },
      include: {
        model: User,
        attribute: ['nick', 'id'],
      },
    });
    // 1. Îì±Î°ùÎêú ÎèÑÎ©îÏù∏ X => ÏóêÎü¨
    if (!domain) {
      return res.status(401).json({
        code: 401,
        message: 'Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÎèÑÎ©îÏù∏ÏûÖÎãàÎã§. Î®ºÏ†Ä ÎèÑÎ©îÏù∏ÏùÑ Îì±Î°ùÌïòÏÑ∏Ïöî',
      });
    }
    // 2. Îì±Î°ùÎêú ÎèÑÎ©îÏù∏ O => JWT ÏÉùÏÑ±
    const token = jwt.sign({
      id: domain.User.id,
      nick: domain.User.nick,
    }, process.env.JWT_SECRET, {
      expiresIn: '30m',                         // üëà 30Î∂Ñ
      issuer: 'nodebird',
    });
    // JWT Î∞úÍ∏â
    return res.json({
      code: 200,
      message: 'ÌÜ†ÌÅ∞Ïù¥ Î∞úÍ∏âÎêòÏóàÏäµÎãàÎã§',
      token,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      code: 500,
      message: 'ÏÑúÎ≤Ñ ÏóêÎü¨',
    });
  }
};

// üëá (JWT Í≤ÄÏ¶ù ÌÖåÏä§Ìä∏) POST /v2/test 
exports.tokenTest = (req, res) => {
  res.json(res.locals.decoded);                  // res.locals.decoded <= verifyTokne ÎØ∏Îì§Ïõ®Ïñ¥ÏóêÏÑú ÎÑòÍ≤®Ï§å
};

// üëá (ÎÇ¥ Ìè¨Ïä§Ìä∏) GET /v2/posts/my
exports.getMyPosts = (req, res) => {
  Post.findAll({ where: { userId: res.locals.decoded.id } })    // res.locals.decoded <= verifyTokne ÎØ∏Îì§Ïõ®Ïñ¥ÏóêÏÑú ÎÑòÍ≤®Ï§å
    .then((posts) => {
      console.log(posts);
      res.json({
        code: 200,
        payload: posts,
      });
    })
    .catch((error) => {
      console.error(error);
      return res.status(500).json({
        code: 500,
        message: 'ÏÑúÎ≤Ñ ÏóêÎü¨',
      });
    });
};

// üëá (Ìï¥ÏãúÌÉúÍ∑∏ Í≤ÄÏÉâ) GET /v2/posts/hashtag/:title
exports.getPostsByHashtag = async (req, res) => {
  try {
    // Ìï¥ÏãúÌÉúÍ∑∏
    const hashtag = await Hashtag.findOne({ where: { title: req.params.title } });      // ÌååÎùºÎØ∏ÌÑ∞ (/v2/posts/hashtag/:title)
    if (!hashtag) {
      return res.status(404).json({
        code: 404,
        message: 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§',
      });
    }
    // Ìï¥Îãπ Ìï¥ÏãúÌÉúÍ∑∏Ïùò Ìè¨Ïä§Ìä∏Îì§
    const posts = await hashtag.getPosts();
    return res.json({
      code: 200,
      payload: posts,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      code: 500,
      message: 'ÏÑúÎ≤Ñ ÏóêÎü¨',
    });
  }
};

// üëá (Ï¢ãÏïÑÏöî Í≤åÏãúÍ∏Ä Ï°∞Ìöå) GET /v2/posts/mylikes
exports.getMyLikes = async (req, res) => {
    try {
      const user = await User.findOne({ where: { id: res.locals.decoded.id }});
      if (user) {
        const posts = await user.getLikePosts({
            include: [{ model: User, as: 'User', attributes: ['id', 'nick'], },]
        });
        return res.json({
            code: 200,
            payload: posts,
        });
      }
    } catch (error) {
      console.error(error);
      return res.status(500).json({
        code: 500,
        message: 'ÏÑúÎ≤Ñ ÏóêÎü¨',
      });
    }
  };